{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","pathway-viz-frontend/tests/app.lint-test.js","pathway-viz-frontend/tests/helpers/destroy-app.js","pathway-viz-frontend/tests/helpers/ember-power-select.js","pathway-viz-frontend/tests/helpers/module-for-acceptance.js","pathway-viz-frontend/tests/helpers/start-app.js","pathway-viz-frontend/tests/integration/components/cluster-download-test.js","pathway-viz-frontend/tests/integration/components/download-options-test.js","pathway-viz-frontend/tests/integration/components/term-ontology-test.js","pathway-viz-frontend/tests/integration/components/usage-instructions-test.js","pathway-viz-frontend/tests/integration/helpers/exponential-form-test.js","pathway-viz-frontend/tests/test-helper.js","pathway-viz-frontend/tests/tests.lint-test.js","pathway-viz-frontend/tests/unit/adapters/application-test.js","pathway-viz-frontend/tests/unit/controllers/application-test.js","pathway-viz-frontend/tests/unit/controllers/index-test.js","pathway-viz-frontend/tests/unit/controllers/visualization-test.js","pathway-viz-frontend/tests/unit/initializers/navigation-test.js","pathway-viz-frontend/tests/unit/initializers/store-test.js","pathway-viz-frontend/tests/unit/models/enrichment-test.js","pathway-viz-frontend/tests/unit/models/gene-test.js","pathway-viz-frontend/tests/unit/models/ontology-test.js","pathway-viz-frontend/tests/unit/models/run-test.js","pathway-viz-frontend/tests/unit/models/term-test.js","pathway-viz-frontend/tests/unit/routes/index-test.js","pathway-viz-frontend/tests/unit/routes/visualization-test.js","pathway-viz-frontend/tests/unit/services/navigation-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('pathway-viz-frontend/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('adapters/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/cluster-download.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/cluster-download.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/download-options.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/download-options.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/term-ontology.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/term-ontology.js should pass ESLint\\n\\n30:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n76:35 - Do not use global `$` or `jQuery` (ember/no-global-jquery)\\n76:35 - \\'$\\' is not defined. (no-undef)\\n78:15 - Do not use global `$` or `jQuery` (ember/no-global-jquery)\\n78:15 - \\'$\\' is not defined. (no-undef)\\n110:15 - \\'transform\\' is already defined. (no-redeclare)\\n171:15 - \\'transform\\' is already defined. (no-redeclare)\\n172:15 - \\'node_objects\\' is already defined. (no-redeclare)\\n383:9 - \\'markerlayer\\' is assigned a value but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('components/usage-instructions.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/usage-instructions.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/index.js should pass ESLint\\n\\n21:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n22:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n37:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n38:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n40:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n44:31 - Unnecessary escape character: \\\\<. (no-useless-escape)\\n44:33 - Unnecessary escape character: \\\\>. (no-useless-escape)\\n73:57 - Unexpected control character(s) in regular expression: \\\\x0a. (no-control-regex)');\n  });\n\n  QUnit.test('controllers/visualization.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/visualization.js should pass ESLint\\n\\n20:10 - \\'scheduleOnce\\' is defined but never used. (no-unused-vars)\\n61:13 - \\'i\\' is already defined. (no-redeclare)\\n198:13 - \\'event\\' is already defined. (no-redeclare)\\n236:9 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('helpers/exponential-form.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/exponential-form.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('initializers/navigation.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'initializers/navigation.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('initializers/store.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'initializers/store.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/enrichment.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/enrichment.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/gene.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/gene.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/ontology.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/ontology.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/run.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/run.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/term.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/term.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/visualization.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/visualization.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/navigation.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/navigation.js should pass ESLint\\n\\n');\n  });\n});","define('pathway-viz-frontend/tests/helpers/destroy-app', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  function destroyApp(application) {\n    Ember.run(application, 'destroy');\n  }\n});","define('pathway-viz-frontend/tests/helpers/ember-power-select', ['exports', 'ember-power-select/test-support/helpers'], function (exports, _helpers) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.selectChoose = exports.touchTrigger = exports.nativeTouch = exports.clickTrigger = exports.typeInSearch = exports.triggerKeydown = exports.nativeMouseUp = exports.nativeMouseDown = exports.findContains = undefined;\n  exports.default = deprecatedRegisterHelpers;\n\n\n  function deprecateHelper(fn, name) {\n    return function () {\n      (true && !(false) && Ember.deprecate('DEPRECATED `import { ' + name + ' } from \\'../../tests/helpers/ember-power-select\\';` is deprecated. Please, replace it with `import { ' + name + ' } from \\'ember-power-select/test-support/helpers\\';`', false, { until: '1.11.0', id: 'ember-power-select-test-support-' + name }));\n\n      return fn.apply(undefined, arguments);\n    };\n  }\n\n  var findContains = deprecateHelper(_helpers.findContains, 'findContains');\n  var nativeMouseDown = deprecateHelper(_helpers.nativeMouseDown, 'nativeMouseDown');\n  var nativeMouseUp = deprecateHelper(_helpers.nativeMouseUp, 'nativeMouseUp');\n  var triggerKeydown = deprecateHelper(_helpers.triggerKeydown, 'triggerKeydown');\n  var typeInSearch = deprecateHelper(_helpers.typeInSearch, 'typeInSearch');\n  var clickTrigger = deprecateHelper(_helpers.clickTrigger, 'clickTrigger');\n  var nativeTouch = deprecateHelper(_helpers.nativeTouch, 'nativeTouch');\n  var touchTrigger = deprecateHelper(_helpers.touchTrigger, 'touchTrigger');\n  var selectChoose = deprecateHelper(_helpers.selectChoose, 'selectChoose');\n\n  function deprecatedRegisterHelpers() {\n    (true && !(false) && Ember.deprecate(\"DEPRECATED `import registerPowerSelectHelpers from '../../tests/helpers/ember-power-select';` is deprecated. Please, replace it with `import registerPowerSelectHelpers from 'ember-power-select/test-support/helpers';`\", false, { until: '1.11.0', id: 'ember-power-select-test-support-register-helpers' }));\n\n    return (0, _helpers.default)();\n  }\n\n  exports.findContains = findContains;\n  exports.nativeMouseDown = nativeMouseDown;\n  exports.nativeMouseUp = nativeMouseUp;\n  exports.triggerKeydown = triggerKeydown;\n  exports.typeInSearch = typeInSearch;\n  exports.clickTrigger = clickTrigger;\n  exports.nativeTouch = nativeTouch;\n  exports.touchTrigger = touchTrigger;\n  exports.selectChoose = selectChoose;\n});","define('pathway-viz-frontend/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'pathway-viz-frontend/tests/helpers/start-app', 'pathway-viz-frontend/tests/helpers/destroy-app'], function (exports, _qunit, _startApp, _destroyApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Ember.RSVP.resolve(afterEach).then(function () {\n          return (0, _destroyApp.default)(_this.application);\n        });\n      }\n    });\n  };\n});","define('pathway-viz-frontend/tests/helpers/start-app', ['exports', 'pathway-viz-frontend/app', 'pathway-viz-frontend/config/environment'], function (exports, _app, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  function startApp(attrs) {\n    var attributes = Ember.merge({}, _environment.default.APP);\n    attributes.autoboot = true;\n    attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n    return Ember.run(function () {\n      var application = _app.default.create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('pathway-viz-frontend/tests/integration/components/cluster-download-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('cluster-download', 'Integration | Component | cluster download', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"ktpqpwJ5\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"cluster-download\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"FQVBnP4V\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"cluster-download\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('pathway-viz-frontend/tests/integration/components/download-options-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('download-options', 'Integration | Component | download options', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"46kE1clE\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"download-options\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"6m5b5tjO\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"download-options\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('pathway-viz-frontend/tests/integration/components/term-ontology-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('term-ontology', 'Integration | Component | term ontology', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"QHUZ5Bv6\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"term-ontology\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"UbukOrOD\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"term-ontology\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('pathway-viz-frontend/tests/integration/components/usage-instructions-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('usage-instructions', 'Integration | Component | usage instructions', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"uX0qp5wL\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"usage-instructions\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"SogW/L07\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"usage-instructions\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('pathway-viz-frontend/tests/integration/helpers/exponential-form-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('exponential-form', 'helper:exponential-form', {\n    integration: true\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('inputValue', '1234');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"EcgYuZNG\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"exponential-form\\\",[[20,[\\\"inputValue\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '1234');\n  });\n});","define('pathway-viz-frontend/tests/test-helper', ['pathway-viz-frontend/app', 'pathway-viz-frontend/config/environment', '@ember/test-helpers', 'ember-qunit'], function (_app, _environment, _testHelpers, _emberQunit) {\n  'use strict';\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n\n  (0, _emberQunit.start)();\n});","define('pathway-viz-frontend/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/cluster-download-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/cluster-download-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/download-options-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/download-options-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/term-ontology-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/term-ontology-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/usage-instructions-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/usage-instructions-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/exponential-form-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/exponential-form-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/adapters/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/visualization-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/visualization-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/initializers/navigation-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/initializers/navigation-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/initializers/store-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/initializers/store-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/enrichment-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/enrichment-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/gene-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/gene-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/ontology-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/ontology-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/run-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/run-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/term-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/term-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/visualization-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/visualization-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/navigation-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/navigation-test.js should pass ESLint\\n\\n');\n  });\n});","define('pathway-viz-frontend/tests/unit/adapters/application-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('adapter:application', 'Unit | Adapter | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('pathway-viz-frontend/tests/unit/controllers/application-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:application', 'Unit | Controller | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('pathway-viz-frontend/tests/unit/controllers/index-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:index', 'Unit | Controller | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('pathway-viz-frontend/tests/unit/controllers/visualization-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:visualization', 'Unit | Controller | visualization', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('pathway-viz-frontend/tests/unit/initializers/navigation-test', ['pathway-viz-frontend/initializers/navigation', 'qunit', 'pathway-viz-frontend/tests/helpers/destroy-app'], function (_navigation, _qunit, _destroyApp) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Initializer | navigation', {\n    beforeEach: function beforeEach() {\n      var _this = this;\n\n      Ember.run(function () {\n        _this.application = Ember.Application.create();\n        _this.application.deferReadiness();\n      });\n    },\n    afterEach: function afterEach() {\n      (0, _destroyApp.default)(this.application);\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    (0, _navigation.initialize)(this.application);\n\n    // you would normally confirm the results of the initializer here\n    assert.ok(true);\n  });\n});","define('pathway-viz-frontend/tests/unit/initializers/store-test', ['pathway-viz-frontend/initializers/store', 'qunit', 'pathway-viz-frontend/tests/helpers/destroy-app'], function (_store, _qunit, _destroyApp) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Initializer | store', {\n    beforeEach: function beforeEach() {\n      var _this = this;\n\n      Ember.run(function () {\n        _this.application = Ember.Application.create();\n        _this.application.deferReadiness();\n      });\n    },\n    afterEach: function afterEach() {\n      (0, _destroyApp.default)(this.application);\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    (0, _store.initialize)(this.application);\n\n    // you would normally confirm the results of the initializer here\n    assert.ok(true);\n  });\n});","define('pathway-viz-frontend/tests/unit/models/enrichment-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('enrichment', 'Unit | Model | enrichment', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('pathway-viz-frontend/tests/unit/models/gene-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('gene', 'Unit | Model | gene', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('pathway-viz-frontend/tests/unit/models/ontology-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('ontology', 'Unit | Model | ontology', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('pathway-viz-frontend/tests/unit/models/run-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('run', 'Unit | Model | run', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('pathway-viz-frontend/tests/unit/models/term-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('term', 'Unit | Model | term', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('pathway-viz-frontend/tests/unit/routes/index-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:index', 'Unit | Route | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('pathway-viz-frontend/tests/unit/routes/visualization-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:visualization', 'Unit | Route | visualization', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('pathway-viz-frontend/tests/unit/services/navigation-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('service:navigation', 'Unit | Service | navigation', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","require('pathway-viz-frontend/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingsjHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClltHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;","file":"tests.js"}